package sanitize

import "testing"

func TestClean(t *testing.T) {
	testCases := []struct {
		name                 string
		inputString          string
		expectedOutputString string
	}{
		{
			"Remove all invalid characters from a string",
			// This string which should contain every unicode point from the v1 indexer
			// regexp (minus the range hyphens) was generated by this one-liner:
			//     ruby -e 'print "#\u0001\u0008\u000b\u000e\u001f\u007f\u009f\ufdd0\ufdef\ufffe\uffff\u{1fffe}\u{1ffff}\u{2fffe}\u{2ffff}\u{3fffe}\u{3ffff}\u{4fffe}\u{4ffff}\u{5fffe}\u{5ffff}\u{6fffe}\u{6ffff}\u{7fffe}\u{7ffff}\u{8fffe}\u{8ffff}\u{9fffe}\u{9ffff}\u{afffe}\u{affff}\u{bfffe}\u{bffff}\u{cfffe}\u{cffff}\u{dfffe}\u{dffff}\u{efffe}\u{effff}\u{ffffe}\u{fffff}\u{10fffe}\u{10ffff}#"' | pbcopy
			// All of the characters between the beginning and end "#" characters
			// should be removed.
			`#﷐﷯￾￿🿾🿿𯿾𯿿𿿾𿿿񏿾񏿿񟿾񟿿񯿾񯿿񿿾񿿿򏿾򏿿򟿾򟿿򯿾򯿿򿿾򿿿󏿾󏿿󟿾󟿿󯿾󯿿󿿾󿿿􏿾􏿿#`,
			"##",
		},
		{
			"Should not remove or change tags",
			`Henry Draper: Memorial minute. By Geo. F. Barker, for the <emph render="italic">Proceedings of the American Philosophical Society</emph>.`,
			`Henry Draper: Memorial minute. By Geo. F. Barker, for the <emph render="italic">Proceedings of the American Philosophical Society</emph>.`,
		},
		{
			"Remove U+009D OSC but not U+2013 En Dash",
			"Civil Rights – Monroe, North Carolina \"KISSING CASE\": David Fuzzy\"\u009D Simpson and Hanover Thompson, Mrs.Jennie Simpson, Mrs.Evelyn Thompson, Dr.A.E.Perry, Robert F.Williams, Mrs.Mary Ruth Reid Assault Case, Rev TH Harris",
			"Civil Rights – Monroe, North Carolina \"KISSING CASE\": David Fuzzy\" Simpson and Hanover Thompson, Mrs.Jennie Simpson, Mrs.Evelyn Thompson, Dr.A.E.Perry, Robert F.Williams, Mrs.Mary Ruth Reid Assault Case, Rev TH Harris",
		},
		{
			"Amharic characters not affected",
			"አንድ ሁለት ሶስት መሞከር",
			"አንድ ሁለት ሶስት መሞከር",
		},
		{
			"Chinese characters not affected",
			"測試 測試一二三",
			"測試 測試一二三",
		},
		{
			"Greek characters not affected",
			"δοκιμή δοκιμής ένα δύο τρία",
			"δοκιμή δοκιμής ένα δύο τρία",
		},
	}

	for _, testCase := range testCases {
		actual := Clean(testCase.inputString)
		if actual != testCase.expectedOutputString {
			t.Errorf(`%s: expected output string "%s" for input string "%s" but got "%s"`,
				testCase.name, testCase.expectedOutputString, testCase.inputString,
				actual)
		}
	}
}
